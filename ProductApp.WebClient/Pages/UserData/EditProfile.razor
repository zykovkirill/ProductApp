@*@page "/products/details/{id}"
@inject ProductsService productsService
@inject IFileReaderService fileReaderService
@inject ToDoItemService itemService
@inject NavigationManager navigatorManager
@using System.IO;

@attribute [Authorize(Roles = "Admin")]

<h3>Plan @model.Name</h3>

<div class="row">
    <div class=" =col-6">
        <EditForm Model="model" OnValidSubmit="async () => await editProductAsync() ">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType" />
                <DataAnnotationsValidator />
                <ValidationSummary />

                <RadzenTextBox Placeholder="Наименование" @bind-Value="model.Name" Style="margin:10px;" />
                <RadzenNumeric Placeholder="Цена" @bind-Value="model.Price" Style="margin:10px;" />
                <Radzen.Blazor.RadzenTextArea Placeholder="Description" @bind-Value="model.Description" Style="margin:10px;" />
                <input type="file" Style="margin:10px;" @ref="inputReference" @onchange="async () => await chooseFileAsync()" />
                <img stile="width:100%; margin:10px" src="@imageContent" />
                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" ButtonStyle="Radzen.ButtonStyle.Success" Disabled="isBusy" Style="margin:5px" class="btn-block" Text="Редактировать" />
            </RadzenCard>
        </EditForm>
    </div>

    <div class="col-6">
        <RadzenCard>
            <h2>Plans Items</h2>
            <AlertMessage Message="@itemMessage" MessageType="Models.AlertMessageType.Error" />
            <EditForm Model="itemModel" OnValidSubmit="async () => await submitItemFormAsync()">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <table>
                    <tr>
                        <td>
                            <RadzenButton Text="*" Disabled="isBusy" Click="clearSelection" ButtonStyle="Radzen.ButtonStyle.Info" ButtonType="Radzen.ButtonType.Button" />
                        </td>
                        <td>
                            <RadzenTextBox Placeholder="Описание......" @bind-Value="itemModel.Description" />
                        </td>
                        <td>
                            <RadzenButton Text="Отправить" Disabled="isBusy" ButtonStyle="Radzen.ButtonStyle.Primary" ButtonType="Radzen.ButtonType.Submit" />
                        </td>
                    </tr>
                    @foreach (var item in items)
                    {
                        string descriptionStyle = item.isDone ? "text-decoration-line: line-through" : "text-decoration-line: none";
                        string rowStyle = selectedItem == item ? "cursor:pointer;background:lightblue" : "cursor:pointer;background:white";
                        <tr style="@rowStyle" @onclick=" () => selectItem(item)">
                            <td>
                                <RadzenCheckBox @bind-Value="item.isDone" @onclick=" async () => await changeItemStatusAsync(item.Id) " />
                            </td>
                            <td>
                                <span style="@descriptionStyle">@item.Description</span>
                            </td>
                            <td>
                                <RadzenButton Text="X" ButtonStyle="Radzen.ButtonStyle.Danger" Disabled="isBusy" ButtonType="Radzen.ButtonType.Button" Click="async () => await removeItem(item)" />
                            </td>
                        </tr>
                    }

                </table>
            </EditForm>
        </RadzenCard>
    </div>
</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Parameter]
    public string Id { get; set; }


    ProductRequestClient model = new ProductRequestClient();
    System.IO.Stream fileStream = null;
    string imageContent = string.Empty;
    string fileName = string.Empty;

    bool isBusy = false;

    ElementReference inputReference;

    //Сообщения об ошибках
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    async Task chooseFileAsync()
    {
        var file = (await fileReaderService.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        var fileInfo = await file.ReadFileInfoAsync();
        string extension = Path.GetExtension(fileInfo.Name);
        var allowedExtensions = new string[] { ".jpg", ".png", ".bmp" };
        if (!allowedExtensions.Contains(extension))
        {
            message = "Выбранный файл не поддерживается";
            messageType = Models.AlertMessageType.Error;
            return;
            //Файл не подходит
        }
        message = null;
        using (var memoryStream = await file.CreateMemoryStreamAsync())
        {

            fileStream = new MemoryStream(memoryStream.ToArray());
            fileName = fileInfo.Name;
            imageContent = $"data:{fileInfo.Type};base64, {Convert.ToBase64String(memoryStream.ToArray())}";
        }


    }


    async Task editProductAsync()
    {
        isBusy = true;


        model.CoverFile = fileStream;
        model.FileName = fileName;
        var result = await productsService.EditProductAsync(model);
        if (result.IsSuccess)
        {
            message = "Редактирование завершено";
            messageType = Models.AlertMessageType.Success;
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }

        isBusy = false;

    }

    async Task getProductById()
    {
        isBusy = true;

        var result = await productsService.GetProductByIdAsync(Id);
        if (result.IsSuccess)
        {
            model.Name = result.Record.Name;
            model.Description = result.Record.Description;
            model.Price = result.Record.Price;
            imageContent = result.Record.CoverPath;
            model.Id = Id;
            //  items = result.Record.ToDoItems.ToList();
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }

        isBusy = false;
    }

    protected async override Task OnInitializedAsync()
    {
        var userState = authenticationState.Result;
        string accessToken = userState.User.FindFirst("AccessToken").Value;
        productsService.AccessToken = accessToken;
        //itemService.AccessToken = accessToken;
        await getProductById();
    }

    #region Items
    List<ToDoItem> items = new List<ToDoItem>();
    ToDoItem selectedItem = null;
    ToDoItemRequest itemModel = new ToDoItemRequest();
    string itemMessage = string.Empty;

    //Вставить
    async Task insertItemAsync()
    {
        isBusy = true;

        itemModel.PlanId = Id;
        var result = await itemService.CreateItemAsync(itemModel);
        if (result.IsSuccess)
        {
            items.Add(result.Record);
        }
        else
        {
            itemMessage = result.Message;
        }


        isBusy = false;

    }

    // Редактировать
    async Task editItemAsync()
    {
        isBusy = true;

        itemModel.PlanId = Id;
        var result = await itemService.EditItemAsync(itemModel);
        if (result.IsSuccess)
        {
            var editedItem = items.SingleOrDefault(i => i.Id == result.Record.Id);
            editedItem.Description = result.Record.Description;
        }
        else
        {
            itemMessage = result.Message;
        }


        isBusy = false;

    }

    async Task submitItemFormAsync()
    {

        if (selectedItem == null)
        {
            await insertItemAsync();
        }
        else
        {
            await editItemAsync();
        }


    }

    // Обновление статуса
    async Task changeItemStatusAsync(string itemId)
    {
        isBusy = true;
        var result = await itemService.ChangeItemStateAsync(itemId);
        if (!result.IsSuccess)
        {
            itemMessage = result.Message;
        }
        isBusy = false;

    }

    // Выбрать
    void selectItem(ToDoItem item)
    {
        selectedItem = item;
        itemModel.Id = item.Id;
        itemModel.Description = item.Description;
        if (item.isDone)
            itemMessage = "Невозможно редактировать";
        else
            itemMessage = null;

    }

    // Очистить
    void clearSelection()
    {
        selectedItem = null;
        itemModel.Id = null;
        itemModel.Description = null;
    }

    //Удалить из списка

    async Task removeItem(ToDoItem item)
    {
        isBusy = true;

        var result = await itemService.DeleteItemAsync(item.Id);
        if (result.IsSuccess)
        {
            items.Remove(item);
        }
        else
        {
            itemMessage = result.Message;
        }

        isBusy = false;

    }

    #endregion
}*@
