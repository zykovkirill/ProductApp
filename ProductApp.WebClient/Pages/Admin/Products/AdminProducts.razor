@*ПЕРЕНЕСТИ В ADMIN*@
@page "/adminproducts"
@page "/adminproducts/{PageNumber:int}"
@inject ProductsService productsService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin")]

@if (string.IsNullOrWhiteSpace(Query))
{
    <h2>Мои продукты @*- Страница: @PageNumber*@</h2>
}
else
{
    <h2>Мои продукты - Результат поиска: '@Query' - Страница: @PageNumber</h2>
}

@if (isBusy)
{
    <h2>Загрузка...</h2>
}
else
{
<div class="row">
    <AlertMessage Message="@message" MessageType="@messageType" />
    <RadzenTextBox Placeholder="Введите запрос" @bind-Value="Query" Style=" margin: 15px 15px 15px 15px" />
    <RadzenButton Text="Искать" Icon="search" Style=" margin: 15px 15px 15px 15px" Click="async () => await getProductsAsync()" />
    <RadzenDropDown AllowClear="true"
                    @bind-Value=@multipleValues Multiple="true" Placeholder="Тип продукта" Data=@(prod) TextProperty="ProductTypeName" ValueProperty="ProductTypeInt"
                    Change=@(args => OnChange(args))
                    Style=" margin: 15px 15px 15px 15px" />
</div>
    <hr />

    <div class="row">
        @foreach (var product in products)
        {

            @*<div class="col-4">
                <RadzenCard Style="margin:10px;height:auto; max-width:100%; resize: both;">
                    <img src="@product.CoverPath" style="height:auto; max-width:100%;  margin:5px" />
                    <a href='/products/details/@product.Id'> @product.Name </a>
                    <p>Цена: @product.Price</p>
                    <hr />
                    <div class="row">
                        <div class="col-6">
                            <RadzenButton ButtonStyle="Radzen.ButtonStyle.Success" Text="Изменить" Click=' () => navigationManager.NavigateTo($"/products/details/{product.Id}")' class="btn-block" />
                        </div>
                        <div class="col-6">
                            <RadzenButton ButtonStyle="Radzen.ButtonStyle.Danger" Text="Удалить" class="btn-block" Click="() => selectProduct(product.Id)" />
                        </div>
                        @if (selectedUserId == product.Id)
                        {
                            <div class="row">
                                <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Text="Подтвердить" class="btn-block" Click="async () => await deleteProductAsync()" />
                            </div>
                        }
                    </div>
                </RadzenCard>
            </div>*@

            <RadzenCard Style="width:300px; margin: 15px 15px 15px 15px">
                <div class="row">
                    <RadzenImage Path="@product.CoverPath" Style="height:auto; max-width:100%; margin:5px" />
                    <div class="col-md-6">
                        @*<RadzenImage Path="@product.CoverPath" Style="width:100px;" />*@
                        @*<img src="@product.CoverPath" style="height:auto; max-width:100%;  margin:5px" />*@
                        <h3> @product.Name </h3>
                        <h3>Цена: @product.Price</h3>
                        <h3>Тип продукта: @*@Utils.GetNameProductByType(product.ProductType)*@</h3>
                        <hr />
                    </div>
                    <RadzenButton ButtonStyle="Radzen.ButtonStyle.Success" Icon="build" Text="Изменить" Click=' () => navigationManager.NavigateTo($"/products/details/{product.Id}")' class="btn-block" />
                    <RadzenButton ButtonStyle="Radzen.ButtonStyle.Danger" Icon="delete" Text="Удалить" class="btn-block" Click="() => selectProduct(product.Id)" />

                    @if (selectedUserId == product.Id)
                    {
                        <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Icon="done" Text="Подтвердить" class="btn-block" Click="async () => await deleteProductAsync()" />
                        <RadzenButton ButtonStyle="Radzen.ButtonStyle.Secondary" Icon="cancel" Text="Отмена" class="btn-block" Click="() => cancelSelectProduct()" />
                    }
                </div>
            </RadzenCard>



        }

    </div>
    <hr />
    <div class="row">
        @for (int i = 1; i <= totalPages; i++)
        {
            int page = i;
            @if (page == PageNumber)
            {
                <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Text="@i.ToString()" Click="async () => await moveToPageAsync(page)" Disabled="true" Style="margin:8px;" />
            }
            else
            {
                <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Text="@i.ToString()" Click="async () => await moveToPageAsync(page)" Style="margin:8px;" />
            }
        }

    </div>
}


@code {
    [Parameter]
    public int? PageNumber { get; set; }

    [Parameter]
    public string Query { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    bool isBusy = false;
    List<Product> products = new List<Product>();

    int totalPages = 1;
    string filter = String.Empty;

    IEnumerable<string> multipleValues;
    List<Utils.ProductType> prod = new List<Utils.ProductType>();

    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    async Task getProductsAsync()
    {
        isBusy = true;

        var userState = authenticationState.Result;

        productsService.AccessToken = userState.User.FindFirst("AccessToken").Value;



        if (PageNumber == null)
            PageNumber = 1;

        CollectionPagingResponse<Product> result;
        if (string.IsNullOrWhiteSpace(Query))
            if (filter != String.Empty)
                result = await productsService.GetFilterProductsByPageAsync(PageNumber.Value, filter);
            else
                result = await productsService.GetAllProductsByPageAsync(PageNumber.Value);
        else
            result = await productsService.SearchProductsByPageAsync(Query, PageNumber.Value);

        if (result.IsSuccess)
        {
            if (result.Count % result.PageSize == 0)
                totalPages = result.Count / result.PageSize;
            else
                totalPages = (result.Count / result.PageSize) + 1;


            products = result.Records.ToList();
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }
        isBusy = false;
    }

    async Task moveToPageAsync(int pageNumber)
    {
        PageNumber = pageNumber;
        await getProductsAsync();
    }

    string selectedUserId = string.Empty;

    void selectProduct(string id)
    {
        selectedUserId = id;

    }
    void cancelSelectProduct()
    {
        selectedUserId = String.Empty;

    }

    async Task deleteProductAsync()
    {
        isBusy = true;
        var result = await productsService.DeleteProductAsync(selectedUserId);
        if (result.IsSuccess)
        {
            var deletedProducts = products.SingleOrDefault(p => p.Id == selectedUserId);
            products.Remove(deletedProducts);
        }
        else
        {
            await getProductsAsync();
        }
        isBusy = false;
    }


    protected override async Task OnInitializedAsync()
    {
        List<string> multiple = new List<string>();
        foreach (var k in Utils.ProductTypeDictionary)
        {
            prod.Add(new Utils.ProductType() { ProductTypeInt = k.Key.ToString(), ProductTypeName = k.Value });
            multiple.Add(k.Key.ToString());
        }
        multipleValues = multiple;
        await getProductsAsync();
    }

    async Task OnChange(object value)
    {

        filter = string.Join(", ", (IEnumerable<object>)value);
        multipleValues = (IEnumerable<string>)value;
        await getProductsAsync();
    }

}
