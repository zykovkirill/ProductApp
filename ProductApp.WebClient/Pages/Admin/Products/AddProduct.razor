@page "/products/AddProduct"
@inject ProductsService productsService
@inject IFileReaderService fileReaderService
@inject NavigationManager navigatorManager
@using System.IO;
@attribute [Authorize(Roles = "Admin")]

<h3>Добавить продукт</h3>

<div class="row">
    <div class=" =col-6">
        <EditForm Model="model" OnValidSubmit="async () => await postProductAsync() ">
            <RadzenCard>
                <AlertMessage Message="@message" OnClickCallback="CloseInfoMessage" MessageType="@messageType" />
                <DataAnnotationsValidator />
                <ValidationSummary />
                @*//TODO: Сделать проверку на не заполненные поля выводить предупреждение *@
                <RadzenTextBox Placeholder="Наименование" @bind-Value="model.Name" Style="margin:10px;" />
                <Radzen.Blazor.RadzenTextArea Placeholder="Описание" @bind-Value="model.Description" Style="margin:10px;" />
                @*//TODO: Сделать проверку на стороне сервера на отрицательные значения*@
                <RadzenNumeric Placeholder="Цена" Min="0" @bind-Value="model.Price" Style="margin:10px;" />

                <RadzenDropDown Placeholder="Тип продукта" AllowClear="true" TValue="int"
                                Data=@(Utils.ProductTypeDictionary)
                                TextProperty="Value" ValueProperty="Key"
                                Change=@(args => OnChange(args)) />

                <input type="file" Style="margin:10px;" @ref="inputReference" @onchange="async () => await chooseFileAsync()" />
                <img stile="width:100%; margin:10px" src="@imageContent" />
                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" ButtonStyle="Radzen.ButtonStyle.Success" Disabled="isBusy" Style="margin:5px" class="btn-block" Text="Отправить" />
            </RadzenCard>
        </EditForm>
    </div>
</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    ProductRequestClient model = new ProductRequestClient();
    System.IO.Stream fileStream = null;
    string imageContent = string.Empty;
    string fileName = string.Empty;

    bool isBusy = false;

    ElementReference inputReference;

    //Сообщения об ошибках
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    async Task chooseFileAsync()
    {
        var file = (await fileReaderService.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();
        var fileInfo = await file.ReadFileInfoAsync();
        string extension = Path.GetExtension(fileInfo.Name);
        //TODO: Поддерживает jpg и bmp alpha channel
        var allowedExtensions = new string[] { ".jpg", ".png", ".bmp" };
        if (!allowedExtensions.Contains(extension))
        {
            message = "Выбранный файл не поддерживается";
            messageType = Models.AlertMessageType.Error;
            return;
            //Файл не подходит
        }
        message = null;
        using (var memoryStream = await file.CreateMemoryStreamAsync())
        {
            fileStream = new MemoryStream(memoryStream.ToArray());
            //TODO: Может сделать настройки где задается ограничение размера и вообще нужно сделать пункт в меню для настроек ???
            fileName = fileInfo.Name;
            imageContent = $"data:{fileInfo.Type};base64, {Convert.ToBase64String(memoryStream.ToArray())}";
        }


    }


    async Task postProductAsync()
    {
        isBusy = true;
        model.CoverFile = fileStream;
        model.FileName = fileName;
        var userState = authenticationState.Result;
        productsService.AccessToken = userState.User.FindFirst("AccessToken").Value;
        if (Validate())
        {
            var result = await productsService.PostProductAsync(model);
            if (result.IsSuccess)
                navigatorManager.NavigateTo("/Products");
            else
            {
                message = result.Message;
                messageType = Models.AlertMessageType.Error;
            }
        }
        isBusy = false;

    }

    void OnChange(object value)
    {
        @*//TODO: Сделать проверку на стороне сервера на нулевые значения полей возможно добавить атрибут запрещающий сохранять пустые значения*@
        model.ProductType = (int)value;
    }

    private void CloseInfoMessage()
    {
        message = String.Empty;
    }

    bool Validate()
    {

        if (model.CoverFile == null)
        {
            messageType = Models.AlertMessageType.Warning;
            message = "Файл не выбран";
            return false;
        }
        if (String.IsNullOrEmpty(model.Description))
        {
            messageType = Models.AlertMessageType.Warning;
            message = "Создайте описание";
            return false;
        }
        if (String.IsNullOrEmpty(model.Name))
        {
            messageType = Models.AlertMessageType.Warning;
            message = "Укажите название";
            return false;
        }
        if (model.ProductType == 0)
        {
            messageType = Models.AlertMessageType.Warning;
            message = "Выберите тип продукта";
            return false;
        }
        if (model.Price == 0)
        {
            messageType = Models.AlertMessageType.Warning;
            message = "Цена не может быть 0";
            return false;
        }
        return true;
    }

}
