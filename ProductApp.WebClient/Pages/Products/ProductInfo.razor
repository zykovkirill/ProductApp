@page "/products/ProductInfo/{ProductId}"
@inject ProductsService productsService
@attribute [Authorize(Roles = "Admin, User")]
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage


<h2> Продукт @*- Страница: @PageNumber*@</h2>


@if (isBusy)
{
    <h2>Загрузка...</h2>
}
else
{
    <div class="row">
        <AlertMessage Message="@message" MessageType="@messageType" />
    </div>
    @if (TargetProduct != null)
    {
        <div class="row">
            <RadzenCard Style="margin: 15px 15px 15px 15px">
                <div class="row">
                    <RadzenImage Path="@TargetProduct.CoverPath" Style="height:auto; max-width:100%; margin:5px" />
                    <div class="col-md-6">
                        <h3> @TargetProduct.Name </h3>
                        <h3>Цена: @TargetProduct.Price</h3>
                        <hr />
                    </div>
                    <RadzenButton ButtonStyle="Radzen.ButtonStyle.Success" Text="Добавить" Icon="add_shopping_cart" class="btn-block" Click="() => selectProduct(TargetProduct)" />
                    @if (selectedProduct == TargetProduct)
                    {
                        <RadzenNumeric Placeholder="Колличество" Min="0" @bind-Value="count" Style="margin:10px;" />
                        <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Text="Подтвердить" Icon="done" class="btn-block" Click="async () => await addProductToCartAsync()" />

                    }
                </div>
            </RadzenCard>
        </div>
        <hr />
        <h3>Рейтинг</h3>
        <RadzenRating Change=@(args => OnChange(args, "Rating with 5 stars")) />
        <div>
            <h3>Комментарии</h3>
            <hr />
            @if (Info != null)
            {
                foreach (var comment in Info.Comments.OrderByDescending(c=>c.CreatedDate))
                {
                    <div class="text-body">

                        <h3>@comment.CreatedDate.ToString()</h3>
                        <h3>@comment.UserName</h3>
                        <h3>@comment.UserComment</h3>
                        <hr />
                    </div>
                }
            }


        @*<RadzenDataGrid Data="@Info.Comments" TItem="Comment" AllowVirtualization="true" Style="height:400px">
            <Columns>
                <RadzenDataGridColumn TItem="Comment" Property="CreatedDate" Title="OrderID" />
                <RadzenDataGridColumn TItem="Comment" Property="UserName" Title="ProductID" />
                <RadzenDataGridColumn TItem="Comment" Property="UserComment" Title="Unit Price"/>
                 
            </Columns>
        </RadzenDataGrid>*@


            <RadzenTextArea MaxLength="150" Style="width: 80%; margin: 10px 10px 10px 10px" Placeholder="Оставить комментарий..." @bind-Value="comment.UserComment" />
            <RadzenButton ButtonStyle="Radzen.ButtonStyle.Success" Text="Добавить" Icon="add_circle" class="btn-block" Click="async () => await AddComment()" />


        </div>
    }
}


@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    bool isBusy = false;

    [Parameter]
    public ProductApp.Shared.Models.ProductInfo Info { get; set; }

    private BaseProduct TargetProduct;
    //TODO: Убрать создание экземпляра, создавать только при отправки
    private Comment comment = new Comment();
    private int count;

    [Parameter]
    public string ProductId { get; set; }

    //Сообщения об ошибках
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    async Task getProductInfoAsync(string id)
    {
        isBusy = true;

        var userState = authenticationState.Result;
        productsService.AccessToken = userState.User.FindFirst("AccessToken").Value;

        OperationResponse<ProductApp.Shared.Models.ProductInfo> result;

        result = await productsService.GetProductInfoByIdAsync(id);

        if (result.IsSuccess)
        {
            Info = result.Record;
            message = $"Информация о продукте получена";
            messageType = Models.AlertMessageType.Success;
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }
        isBusy = false;
    }

    async Task AddComment()
    {

        //TODO: сделать в админке все заказы  https://blazor.radzen.com/datagrid-virtualization

        isBusy = true;

        var userState = authenticationState.Result;
        productsService.AccessToken = userState.User.FindFirst("AccessToken").Value;

        comment.CreatedDate = DateTime.Now;
        comment.UserName = userState.User.FindFirst("FirstName").Value;

        OperationResponse<Comment> result;
        result = await productsService.AddCommentAsync(new BaseBuffer<Comment> { Entity = comment, Id = Info.ProductId });

        if (result.IsSuccess)
        {
            //Info.Comments.Add(result.Record);
            message = $"Комментарий добавлен";
            messageType = Models.AlertMessageType.Success;
            //TODO: Убрать создание экземпляра, создавать только при отправки
            comment = new Comment();
            await OnInitializedAsync();
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }
        isBusy = false;

    }

    BaseProduct selectedProduct;

    void selectProduct(BaseProduct product)
    {
        selectedProduct = product;
        message = String.Empty;
    }

    async Task addProductToCartAsync()
    {
        isBusy = true;
        if (count != 0)
        {
            await SessionUtils.AddProductToCartSessionStorageAsync(sessionStorage, selectedProduct, count);
        }
        message = "Продукты добавлены в корзину";
        messageType = Models.AlertMessageType.Success;
        isBusy = false;
    }

    protected override async Task OnInitializedAsync()
    {
        TargetProduct = await SessionUtils.GetProductSessionStorageAsync(sessionStorage);
        await getProductInfoAsync(TargetProduct.Id);
    }

    void OnChange(int value, string name)
    {
        // console.Log($"{name} value changed to {value}");
    }
}
