@page "/products/details/{id}"
@inject ProductsService productsService
@inject IFileReaderService fileReaderService
@inject NavigationManager navigatorManager
@inject ProductTypesService productTypesService
@using System.IO;

@attribute [Authorize(Roles = "Admin")]

<h3>Продукт @model.Name</h3>

<div class="row">
    <div class=" =col-6">
        <EditForm Model="model" OnValidSubmit="async () => await editProductAsync() ">
            <RadzenCard>
                <AlertMessage Message="@message" MessageType="@messageType" />
                <DataAnnotationsValidator />
                <ValidationSummary />

                <RadzenTextBox Placeholder="Наименование" @bind-Value="model.Name" Style="margin:10px;" />
                <RadzenNumeric Placeholder="Цена" @bind-Value="model.Price" Style="margin:10px;" />
                <RadzenNumeric Placeholder="Колличество на складе" @bind-Value="model.QuantityInStock" Style="margin:10px;" />
                <Radzen.Blazor.RadzenTextArea Placeholder="Description" @bind-Value="model.Description" Style="margin:10px;" />
                <RadzenDropDown Placeholder="Тип продукта" AllowClear="true" @bind-Value=@model.ProductType 
                                Data=@productTypes
                                TextProperty="TypeName" ValueProperty="Id"
                                Change=@(args => OnChange(args))>
                </RadzenDropDown>
                <input type="file" Style="margin:10px;" @ref="inputReference" @onchange="async () => await chooseFileAsync()" />
                <img stile="width:100%; margin:10px" src="@imageContent" />
                <hr />
                <RadzenButton ButtonType="Radzen.ButtonType.Submit" ButtonStyle="Radzen.ButtonStyle.Success" Disabled="isBusy" Style="margin:5px" class="btn-block" Text="Редактировать" />
            </RadzenCard>
        </EditForm>
    </div>
</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }

    [Parameter]
    public string Id { get; set; }

    ProductRequestClient model = new ProductRequestClient();
    //ProductType productTypes = new ProductType();


    System.IO.Stream fileStream = null;
    string imageContent = string.Empty;
    string fileName = string.Empty;

    bool isBusy = false;

    List<ProductType> productTypes = new List<ProductType>();

    ElementReference inputReference;

    //Сообщения об ошибках
    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;

    async Task chooseFileAsync()
    {
        var file = (await fileReaderService.CreateReference(inputReference).EnumerateFilesAsync()).FirstOrDefault();

        var fileInfo = await file.ReadFileInfoAsync();
        string extension = Path.GetExtension(fileInfo.Name);
        var allowedExtensions = new string[] { ".jpg", ".png", ".bmp" };
        if (!allowedExtensions.Contains(extension))
        {
            message = "Выбранный файл не поддерживается";
            messageType = Models.AlertMessageType.Error;
            return;
            //Файл не подходит
        }
        message = null;
        using (var memoryStream = await file.CreateMemoryStreamAsync())
        {

            fileStream = new MemoryStream(memoryStream.ToArray());
            fileName = fileInfo.Name;
            imageContent = $"data:{fileInfo.Type};base64, {Convert.ToBase64String(memoryStream.ToArray())}";
        }


    }


    async Task editProductAsync()
    {
        var userState = authenticationState.Result;
        isBusy = true;
        model.CoverFile = fileStream;
        model.FileName = fileName;
        //model.EditedUser = userState.User.FindFirst("Id").Value;
        var result = await productsService.EditProductAsync(model);
        if (result.IsSuccess)
        {
            message = "Редактирование завершено";
            messageType = Models.AlertMessageType.Success;
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }

        isBusy = false;

    }

    async Task getProductTypeAsync()
    {
        var state = authenticationState.Result;
        productTypesService.AccessToken = state.User.FindFirst("AccessToken").Value;
        var result = await productTypesService.GetProductTypesAsync();
        productTypes = result.Records.ToList();
    }


    async Task getProductById()
    {
        isBusy = true;

        var result = await productsService.GetProductByIdAsync(Id);
        if (result.IsSuccess)
        {
            model.Name = result.Record.Name;
            model.Description = result.Record.Description;
            model.Price = result.Record.Price;
            imageContent = result.Record.CoverPath;
            model.Id = Id;
            model.ProductType = result.Record.ProductType.Id;
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }

        isBusy = false;
    }

    protected async override Task OnInitializedAsync()
    {
        var userState = authenticationState.Result;
        string accessToken = userState.User.FindFirst("AccessToken").Value;
        productsService.AccessToken = accessToken;
        //itemService.AccessToken = accessToken;
        await getProductTypeAsync();
        await getProductById();
    }

    void OnChange(object value)
    {
        model.ProductType = (string)value;
    }

}
