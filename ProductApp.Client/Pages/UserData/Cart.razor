@page "/UserData/Cart"
@inject ProductsService productsService
@inject NavigationManager navigationManager
@attribute [Authorize(Roles = "Admin, User")]
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage


<h2>Корзина</h2>

@if (isBusy)
{
    <h2>Загрузка...</h2>
}
else
{

    <hr />
    // TODO: СДЕЛАТЬ ВСЕ ID строками на подобии dbo.Products и ПРОВЕРКУ НА ОТРИЦАТЕЛЬНОЕ КОЛЛИЧЕСТВО
    @if (userOrder != null)
    {
        <div class="row">
            <AlertMessage Message="@message" MessageType="@messageType" />
            <RadzenButton Text="Искать" Icon="search" Style=" margin: 15px 15px 15px 15px" Click="async () => await getProductsAsync()" />
            <RadzenButton Text="Сохранить корзину" Icon="save" Style=" margin: 15px 15px 15px 15px" Click="async () => await getProductsAsync()" />
            <RadzenButton Text="Загрузить корзину" Icon="save_alt" Style=" margin: 15px 15px 15px 15px" Click="async () => await getProductsAsync()" />
        </div>
        <hr />
        <div class="row">
            @foreach (var product in cart)
            {

                <RadzenCard Style="width:300px; margin: 15px 15px 15px 15px">
                    <RadzenImage Path="@product.Product.CoverPath" Style="height:auto; max-width:100%; margin:5px" />
                    <p> @product.Product.Name </p>
                    <p>Цена за 1 штуку: @product.Product.Price</p>
                    <RadzenNumeric Placeholder="Колличество" Min="0" TValue="int" @bind-Value="product.Count" Style="margin:10px;" Change=@(async args => await OnChange(args, product.Product.Id)) />
                    <hr />
                    <div class="row">
                        <RadzenButton ButtonStyle="Radzen.ButtonStyle.Danger" Icon="delete" Text="Удалить" class="btn-block" Click="() => selectProduct(product.Product.Id)" />
                        @if (selectedUserId == product.Product.Id)
                        {
                            <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Icon="done" Text="Подтвердить" class="btn-block" Click="async () => await deleteProductAsync(product)" />
                            <RadzenButton ButtonStyle="Radzen.ButtonStyle.Secondary" Icon="cancel" Text="Отмена" class="btn-block" Click="() => cancelSelectProduct()" />
                        }
                    </div>
                </RadzenCard>

            }
        </div>
        <hr />
        <div class="row">
            <RadzenCard Style=" margin: 15px 15px 15px 15px">
                <h2> Общая сумма :</h2>
                <p> @userOrder.Products.Select(p => p.ProductPrice * p.ProductCount).Sum()</p>
                <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Icon="check_circle_outline" Text="Купить" class="btn-block" Click="async () => await buyProductAsync()" />
            </RadzenCard>
        </div>
    }
    else
    {
        <h2> Корзина пуста</h2>
    }


    <hr />
}


@code {
    [Parameter]
    public int? PageNumber { get; set; }

    [Parameter]
    public string Query { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    bool isBusy = false;
    //IList<ProductInfo> products = new List<ProductInfo>();

    UserOrder userOrder = new UserOrder();
    List<ProductCountable<BaseProduct>> cart = new List<ProductCountable<BaseProduct>>();

    // int totalPages = 1;

    string message = string.Empty;
    Models.AlertMessageType messageType = Models.AlertMessageType.Success;
    private const string _cartSessionStorage = "CartSessionStorage";

    async Task getProductsAsync()
    {
        isBusy = true;

        var isSessionExists = await sessionStorage.ContainKeyAsync(_cartSessionStorage);
        if (isSessionExists)
        {

            //TODO: Уствнавливать прайс в редакторе
            cart = await sessionStorage.GetItemAsync<List<ProductCountable<BaseProduct>>>(_cartSessionStorage);
            //  if (cart.Any())
            //  foreach (var prod in cart)
            //     userOrder.Products.Add(new UserOrderProduct { ProductId = prod.Product.Id, ProductName = prod.Product.Name, ProductCount = prod.Count, ProductCoverPath = prod.Product.CoverPath });
        }

        //var userState = authenticationState.Result;
        //productsService.AccessToken = userState.User.FindFirst("AccessToken").Value;

        //if (PageNumber == null)
        //    PageNumber = 1;

        //OperationResponse<UserOrder> result;
        //result = await productsService.GetProductFromCartAsync();

        //if (result.IsSuccess)
        //{
        //    if (result.Record != null)
        //        userOrder = result.Record;
        //}
        //else
        //{
        //    message = result.Message;
        //    messageType = Models.AlertMessageType.Error;
        //}
        isBusy = false;
    }

    async Task moveToPageAsync(int pageNumber)
    {
        PageNumber = pageNumber;
        await getProductsAsync();
    }

    string selectedUserId;

    void selectProduct(string id)
    {
        selectedUserId = id;

    }

    void cancelSelectProduct()
    {
        selectedUserId = String.Empty;

    }

    async Task deleteProductAsync(ProductCountable<BaseProduct> baseProduct)
    {
        //isBusy = true;
        //var result = await productsService.DeleteProductFromCartAsync(selectedUserId);
        //if (result.IsSuccess)
        //{
        //    var deletedProducts = userOrder.Products.SingleOrDefault(p => p.Id == selectedUserId);
        //    userOrder.Products.Remove(deletedProducts);
        //}
        //else
        //{
        //    await getProductsAsync();
        //}
        //isBusy = false;
        var cartSessionStorage = await sessionStorage.GetItemAsync<List<ProductCountable<BaseProduct>>>(_cartSessionStorage);
        cart.Remove(cart.FirstOrDefault(c => c.Product.Id == baseProduct.Product.Id));
        cartSessionStorage.Remove(cartSessionStorage.FirstOrDefault(c => c.Product.Id ==  baseProduct.Product.Id));
        await sessionStorage.SetItemAsync<List<ProductCountable<BaseProduct>>>(_cartSessionStorage, cartSessionStorage);
    }

    async Task buyProductAsync()
    {
        isBusy = true;
        var result = await productsService.BuyProductAsync(userOrder);
        if (result.IsSuccess)
        {
            navigationManager.NavigateTo("/UserData/Purchases");
        }
        else
        {
            message = result.Message;
            messageType = Models.AlertMessageType.Error;
        }
        isBusy = false;
    }

    async Task OnChange(dynamic value, string id)
    {
        var cartSessionStorage = await sessionStorage.GetItemAsync<List<ProductCountable<BaseProduct>>>(_cartSessionStorage);
        var isProductExists = cartSessionStorage.Any(c => c.Product.Id == id);
        if (isProductExists)
        {
            var product = cartSessionStorage.FirstOrDefault(c => c.Product.Id == id);
            if (value != 0)
            {
                product.Count = value;
                await sessionStorage.SetItemAsync<List<ProductCountable<BaseProduct>>>(_cartSessionStorage, cartSessionStorage);
            }
            else
            {
                //TODO : Как работать без обновления сессии ( удаляешь сначала из  cart потом из cartSessionStorage зачем это?
                //TODO : Вызывать метод deleteProductAsync
                cart.Remove(cart.FirstOrDefault(c => c.Product.Id == id));
                cartSessionStorage.Remove(product);
                await sessionStorage.SetItemAsync<List<ProductCountable<BaseProduct>>>(_cartSessionStorage, cartSessionStorage);
                await deleteProductAsync(product);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        cartSessionStorage
        await getProductsAsync();
    }

}
