

@page "/UserData/Purchases"
@inject ProductsService productsService
@inject NavigationManager navigationManager
@attribute [Authorize]

<h2>Заказы</h2>

@if (isBusy)
{
    <h2>Загрузка...</h2>
}
else
{

    <hr />
    // TODO: СДЕЛАТЬ ВСЕ ID строками на подобии dbo.Products и ПРОВЕРКУ НА ОТРИЦАТЕЛЬНОЕ КОЛЛИЧЕСТВО
    <div class="row">
        @foreach (var purchase in purchases)
        {

            <RadzenCard Style="width:300px; margin: 15px 15px 15px 15px">
                <RadzenImage Path="@purchase.CreatedDate.ToString()" Style="height:auto; max-width:100%; margin:5px" />
                <p> @purchase.Status </p>
            </RadzenCard>

        }
    </div>
  


    <hr />
    <div class="row">
            @for (int i = 1; i <= totalPages; i++)
            {
                int page = i;
                @if (page == PageNumber)
                {
                    <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Text="@i.ToString()" Click="async () => await moveToPageAsync(page)" Disabled="true" Style="margin:8px;" />
                }
                else
                {
                    <RadzenButton ButtonStyle="Radzen.ButtonStyle.Info" Text="@i.ToString()" Click="async () => await moveToPageAsync(page)" Style="margin:8px;" />
                }
            }

        </div>
}


@code {
    [Parameter]
    public int? PageNumber { get; set; }

    [Parameter]
    public string Query { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }
    bool isBusy = false;
    List<UserOrder> purchases = new List<UserOrder>();

    int totalPages = 1;

    async Task getPurchasesAsync()
    {
        isBusy = true;

        var userState = authenticationState.Result;
        productsService.AccessToken = userState.User.FindFirst("AccessToken").Value;



        if (PageNumber == null)
            PageNumber = 1;

        CollectionPagingResponse<UserOrder> result;

        result = await productsService.GetPurchasesAsync();


        // 50 plans | page size = 10 => 5 pages
        // 54 plans | page size = 10 => 5 pages -> page = 4 plans
        if (result.IsSuccess)// Добавить вывод ошибок
        {
            if (result.Count % result.PageSize == 0)
                totalPages = result.Count / result.PageSize;
            else
                totalPages = (result.Count / result.PageSize) + 1;


            purchases = result.Records.ToList();
        }
        isBusy = false;
    }

    async Task moveToPageAsync(int pageNumber)
    {
        PageNumber = pageNumber;
        await getPurchasesAsync();
    }

    string selectedUserId;

    void selectProduct(string id)
    {
        selectedUserId = id;

    }

    void cancelSelectProduct()
    {
        selectedUserId = String.Empty;

    }

    //async Task deleteProductAsync()
    //{
    //    isBusy = true;
    //    var result = await productsService.DeleteProductFromCartAsync(selectedUserId);
    //    if (result.IsSuccess)
    //    {
    //        var deletedProducts = purchases.SingleOrDefault(p => p.Id == selectedUserId);
    //        purchases.Remove(deletedProducts);
    //    }
    //    else
    //    {
    //        await getPurchasesAsync();
    //    }
    //    isBusy = false;
    //}

    protected override async Task OnInitializedAsync()
    {
        await getPurchasesAsync();
    }

}
